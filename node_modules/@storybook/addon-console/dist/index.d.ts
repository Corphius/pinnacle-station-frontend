/**
 * This callback could be passed to {@link setConsoleOptions} or {@link withConsole}
 *
 * @example
 * import { withConsole } from `@storybook/addon-console`;
 *
 * const optionsCallback = (options) => ({panelExclude: [...options.panelExclude, /Warning/]});
 * addDecorator((storyFn, context) => withConsole(optionsCallback)(storyFn)(context));
 *
 * @callback optionsCallback
 * @param {addonOptions} currentOptions - the current {@link addonOptions}
 * @return {addonOptions} - new {@link addonOptions}
 */
/**
 * Set addon options and returns a new one
 * @param {addonOptions|optionsCallback} optionsOrFn
 * @return {addonOptions}
 * @see addonOptions
 * @see optionsCallback
 *
 * @example
import { setConsoleOptions } from '@storybook/addon-console';

const panelExclude = setConsoleOptions({}).panelExclude;
setConsoleOptions({
  panelExclude: [...panelExclude, /deprecated/],
});
 */
export function setConsoleOptions(optionsOrFn: addonOptions | optionsCallback): addonOptions;
/**
 * Wraps your stories with specified addon options.
 * If you don't pass {`log`, `warn`, `error`} in options argument it'll create them from context for each story individually. Hence you'll see from what exact story you got a log or error. You can log from component's lifecycle methods or within your story.
 * @param {addonOptions|optionsCallback} [optionsOrFn]
 * @see [addonOptions]{@link #storybookaddon-consolesetconsoleoptionsoptionsorfn--addonoptions}
 * @see [optionsCallback]{@link #storybookaddon-consoleoptionscallback--addonoptions}
 * @return {function} wrappedStoryFn
 *
 * @example
 * import { storiesOf } from '@storybook/react';
 * import { withConsole } from '@storybook/addon-console';
 *
 * storiesOf('withConsole', module)
 *  .addDecorator((storyFn, context) => withConsole()(storyFn)(context))
 *  .add('with Log', () => <Button onClick={() => console.log('Data:', 1, 3, 4)}>Log Button</Button>)
 *  .add('with Warning', () => <Button onClick={() => console.warn('Data:', 1, 3, 4)}>Warn Button</Button>)
 *  .add('with Error', () => <Button onClick={() => console.error('Test Error')}>Error Button</Button>)
 *  .add('with Uncatched Error', () =>
 *    <Button onClick={() => console.log('Data:', T.buu.foo)}>Throw Button</Button>
 *  )
 // Action Logger Panel:
 // withConsole/with Log: ["Data:", 1, 3, 4]
 // withConsole/with Warning warn: ["Data:", 1, 3, 4]
 // withConsole/with Error error: ["Test Error"]
 // withConsole/with Uncatched Error error: ["Uncaught TypeError: Cannot read property 'foo' of undefined", "http://localhost:9009/static/preview.bundle.js", 51180, 42, Object]
 */
export function withConsole(optionsOrFn?: addonOptions | optionsCallback): Function;
/**
 * This callback could be passed to {@link setConsoleOptions} or {@link withConsole}
 */
export type optionsCallback = (currentOptions: addonOptions) => addonOptions;
/**
 * - This options could be passed to [withConsole]{@link #storybookaddon-consolewithconsoleoptionsorfn--function} or [setConsoleOptions]{@link #module_
 */
export type addonOptions = any;
declare namespace addonOptions {
    const panelExclude: RegExp[];
    const panelInclude: any[];
    const consoleExclude: any[];
    const consoleInclude: any[];
    const log: string;
    const warn: string;
    const error: string;
}
export {};
